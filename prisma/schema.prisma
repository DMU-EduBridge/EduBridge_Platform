generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

// ===== ENUM 타입 정의 =====
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ProblemType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY
  TRUE_FALSE
  CODING
  MATH
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum ProblemStatus {
  DRAFT
  PENDING
  PUBLISHED
  ARCHIVED
}

enum LearningMaterialStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ServerStatus {
  HEALTHY
  UNHEALTHY
  UNKNOWN
  MAINTENANCE
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

// ProgressStatus enum 제거 - StudentProgress 모델과 함께 제거됨

enum AnalysisType {
  BASIC_STATISTICS
  ACHIEVEMENT_DISTRIBUTION
  STRUGGLING_STUDENTS
  TOP_PERFORMERS
  SUBJECT_ANALYSIS
  TREND_ANALYSIS
}

// TemplateType enum 제거 - SampleDataTemplate 모델과 함께 제거됨

model User {
  id                   String           @id @default(cuid())
  email                String           @unique
  password             String? // 패스워드 (OAuth 사용자는 null)
  name                 String
  role                 UserRole
  avatar               String?
  bio                  String?
  gradeLevel           String? // grade -> gradeLevel로 통일
  status               UserStatus       @default(ACTIVE)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?
  school               String?
  subject              String?
  lastLoginAt          DateTime? // 마지막 로그인 시간
  passwordResetToken   String? // 비밀번호 재설정 토큰
  passwordResetExpires DateTime? // 비밀번호 재설정 만료 시간
  // attempts와 studySessions 관계 제거됨
  reviewedProblems     Problem[]        @relation("ProblemReviewer")
  preferences          UserPreferences?

  // Educational AI System 관련 관계
  textbooks       Textbook[]
  problems        Problem[]         @relation("ProblemCreator")
  searchQueries   SearchQuery[]
  progressEntries ProblemProgress[]
  attempts        Attempt[]
  todos           Todo[]

  // Teacher Report System 관련 관계
  teacherReports TeacherReport[]
  aiServerSyncs  AIServerSync[]

  // 클래스 관련 관계
  createdClasses   Class[]             @relation("ClassCreator")
  classMemberships ClassMember[]
  assignedProblems ProblemAssignment[] @relation("ProblemAssigner")

  @@index([role])
  @@index([status])
  @@index([deletedAt])
  @@index([lastLoginAt])
  @@map("users")
}

// 클래스/수업 관리
model Class {
  id          String    @id @default(cuid())
  name        String
  description String?
  subject     String
  gradeLevel  String
  schoolYear  String // 2024, 2025 등
  semester    String // 1학기, 2학기
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // 관계
  createdBy   String
  creator     User                @relation("ClassCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members     ClassMember[]
  assignments ProblemAssignment[]
  // attempts 관계 제거됨

  @@index([createdBy])
  @@index([subject, gradeLevel])
  @@index([schoolYear, semester])
  @@index([isActive])
  @@index([deletedAt])
  @@map("classes")
}

// 클래스 멤버십 (선생님-학생 관계)
model ClassMember {
  id       String    @id @default(cuid())
  classId  String
  userId   String
  role     String    @default("STUDENT") // STUDENT, TEACHER, ASSISTANT
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  isActive Boolean   @default(true)

  // 관계
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@index([classId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("class_members")
}

model UserPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique
  preferredDifficulty String  @default("MEDIUM")
  learningStyle       String
  studyTime           Int?
  interests           String
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  weeklyReport        Boolean @default(true)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_preferences")
}

model LearningMaterial {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  subject          String
  difficulty       String
  estimatedTime    Int?
  files            String?
  status           LearningMaterialStatus    @default(DRAFT)
  isActive         Boolean                   @default(true)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  materialProblems LearningMaterialProblem[]
  progressEntries  ProblemProgress[]
  attempts         Attempt[]
  // studySessions 관계 제거됨

  @@index([subject, difficulty, isActive])
  @@index([status, createdAt])
  @@index([status, subject, createdAt])
  @@index([deletedAt])
  @@map("learning_materials")
}

model Problem {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  type             ProblemType
  difficulty       ProblemDifficulty
  subject          String
  gradeLevel       String? // AI 생성 문제용 추가
  unit             String? // AI 생성 문제용 추가
  options          Json?
  correctAnswer    String
  explanation      String?
  hints            Json?
  tags             Json?
  points           Int                       @default(1)
  timeLimit        Int?
  isActive         Boolean                   @default(true)
  isAIGenerated    Boolean                   @default(false)
  aiGenerationId   String?
  qualityScore     Float?
  reviewStatus     ReviewStatus              @default(PENDING)
  status           ProblemStatus             @default(DRAFT)
  reviewedBy       String?
  reviewedAt       DateTime?
  generationPrompt String? // AI 생성 프롬프트
  contextChunkIds  String? // 참조된 ChromaDB 청크 ID들
  generationTimeMs Int? // AI 생성 시간
  modelName        String? // 사용된 AI 모델
  tokensUsed       Int? // 사용된 토큰 수
  costUsd          Float? // 생성 비용
  textbookId       String? // 참조된 교과서 ID
  createdBy        String? // 생성자 (AI 생성 문제용)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  // attempts 관계 제거됨
  materialProblems LearningMaterialProblem[]
  progressEntries  ProblemProgress[]
  attempts         Attempt[]
  reviewer         User?                     @relation("ProblemReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull)
  textbook         Textbook?                 @relation(fields: [textbookId], references: [id], onDelete: SetNull)
  creator          User?                     @relation("ProblemCreator", fields: [createdBy], references: [id], onDelete: SetNull)
  assignments      ProblemAssignment[]

  @@index([subject])
  @@index([difficulty])
  @@index([isAIGenerated])
  @@index([reviewStatus])
  @@index([status])
  @@index([type])
  @@index([aiGenerationId])
  @@index([reviewedBy])
  @@index([deletedAt])
  @@index([gradeLevel])
  @@index([createdBy])
  @@index([textbookId])
  @@index([subject, difficulty, gradeLevel]) // 복합 쿼리 최적화
  @@index([isAIGenerated, reviewStatus, status, createdAt]) // AI 문제 관리 최적화
  @@index([createdBy, createdAt]) // 사용자별 문제 생성 이력
  @@index([textbookId, gradeLevel]) // 교과서별 문제 조회
  @@map("problems")
}

// StudentProgress 모델 제거 - Attempt 모델로 대체됨

// AnalysisReport 모델 제거 - 사용되지 않음

model TeacherReport {
  id               String       @id @default(cuid())
  title            String
  content          String
  reportType       String       @default("full") // full, summary
  classInfo        Json? // JSON object
  students         Json? // JSON array
  analysisData     Json? // JSON object
  metadata         Json? // JSON object
  tokenUsage       Int?
  generationTimeMs Int?
  modelName        String?
  costUsd          Float?
  status           ReportStatus @default(DRAFT)
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user           User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  reportAnalyses ReportAnalysis[]

  @@index([createdBy])
  @@index([status])
  @@index([createdAt])
  @@map("teacher_reports")
}

// CareerCounseling 모델 제거 - 사용되지 않음

model LearningMaterialProblem {
  id                 String           @id @default(cuid())
  learningMaterialId String
  problemId          String
  createdAt          DateTime         @default(now())
  problem            Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade)

  @@unique([learningMaterialId, problemId])
  @@index([learningMaterialId])
  @@index([problemId])
  @@map("learning_material_problems")
}

// AIModel, AIGeneration 모델 제거 - 사용되지 않음

// ReportInsight, ReportRecommendation 모델 제거 - 사용되지 않음

// StudySession과 Attempt 모델 제거됨 - ProblemProgress로 대체

model ProblemProgress {
  id             String    @id @default(cuid())
  userId         String
  studyId        String
  problemId      String
  attemptNumber  Int       @default(1) // 학습 세션 시도 번호
  selectedAnswer String?
  isCorrect      Boolean   @default(false)
  startedAt      DateTime?
  completedAt    DateTime?
  timeSpent      Int       @default(0) // 초 단위 소요 시간
  lastAccessed   DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  learningMaterial LearningMaterial @relation(fields: [studyId], references: [id], onDelete: Cascade)

  @@unique([userId, studyId, problemId, attemptNumber])
  @@index([studyId])
  @@index([userId, studyId])
  @@index([userId, studyId, attemptNumber])
  @@map("problem_progress")
}

model Attempt {
  id            String    @id @default(cuid())
  userId        String
  studyId       String?
  problemId     String
  attemptNumber Int       @default(1)
  selected      String
  isCorrect     Boolean   @default(false)
  startedAt     DateTime  @default(now())
  completedAt   DateTime?
  timeSpent     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  learningMaterial LearningMaterial? @relation(fields: [studyId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
  @@index([userId, studyId])
  @@index([problemId])
  @@map("attempts")
}

// 클래스별 문제 할당
model ProblemAssignment {
  id           String    @id @default(cuid())
  classId      String
  problemId    String
  assignedBy   String // 할당한 선생님 ID
  assignedAt   DateTime  @default(now())
  dueDate      DateTime? // 마감일
  isActive     Boolean   @default(true)
  instructions String? // 특별 지시사항

  // 관계
  class    Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  problem  Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  assigner User    @relation("ProblemAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([classId, problemId])
  @@index([classId])
  @@index([problemId])
  @@index([assignedBy])
  @@index([dueDate])
  @@index([isActive])
  @@map("problem_assignments")
}

model Todo {
  id          String   @id @default(cuid())
  userId      String
  text        String
  completed   Boolean  @default(false)
  priority    String   @default("medium")
  category    String?
  description String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed])
  @@map("todos")
}

// Educational AI System Models - 실제 ChromaDB 기반 구조 반영

model Textbook {
  id               String           @id @default(cuid())
  title            String
  subject          String
  gradeLevel       String
  publisher        String?
  fileName         String
  filePath         String
  fileSize         Int
  mimeType         String?
  totalChunks      Int              @default(0)
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?
  uploadedBy       String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user     User            @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  chunks   DocumentChunk[]
  problems Problem[] // AI 생성 문제들

  @@index([subject, gradeLevel])
  @@index([processingStatus])
  @@index([uploadedBy])
  @@map("textbooks")
}

model DocumentChunk {
  id            String   @id @default(cuid())
  textbookId    String
  chunkIndex    Int
  content       String
  contentLength Int
  embeddingId   String? // ChromaDB의 문서 ID
  metadata      Json? // ChromaDB 메타데이터 JSON
  createdAt     DateTime @default(now())

  textbook      Textbook       @relation(fields: [textbookId], references: [id], onDelete: Cascade)
  searchResults SearchResult[]

  @@index([textbookId])
  @@index([embeddingId])
  @@map("document_chunks")
}

model SearchQuery {
  id           String   @id @default(cuid())
  queryText    String
  subject      String?
  gradeLevel   String?
  unit         String?
  resultsCount Int
  searchTimeMs Int
  userId       String
  sessionId    String?
  createdAt    DateTime @default(now())

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results SearchResult[]

  @@index([userId])
  @@index([createdAt])
  @@index([userId, subject, createdAt]) // 사용자별 검색 이력
  @@index([subject, gradeLevel, createdAt]) // 주제별 검색 트렌드
  @@map("search_queries")
}

model SearchResult {
  id              String   @id @default(cuid())
  queryId         String
  chunkId         String
  similarityScore Float
  rankPosition    Int
  createdAt       DateTime @default(now())

  query SearchQuery   @relation(fields: [queryId], references: [id])
  chunk DocumentChunk @relation(fields: [chunkId], references: [id])

  @@index([queryId])
  @@index([chunkId])
  @@map("search_results")
}

// QuestionOption, QuestionTag 모델 제거 - 사용되지 않음

// AIApiUsage, AIPerformanceMetric, AIUsageStatistics 모델 제거 - 사용되지 않음

// Teacher Report System Models - 실제 메모리 기반 구조 반영

model ReportAnalysis {
  id           String       @id @default(cuid())
  reportId     String
  analysisType AnalysisType // enum 사용
  analysisData Json? // JSON object
  createdAt    DateTime     @default(now())

  report TeacherReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([analysisType])
  @@map("report_analyses")
}

// StudentData, ClassInfo 모델 제거 - 사용되지 않음

model AIServerStatus {
  id             String       @id @default(cuid())
  serverName     String // educational_ai, teacher_report
  serverUrl      String
  status         ServerStatus @default(UNKNOWN)
  responseTimeMs Int?
  version        String?
  lastChecked    DateTime     @default(now())
  errorMessage   String?
  services       Json? // JSON object - 실제 서버 상태 정보
  createdAt      DateTime     @default(now())

  @@index([serverName])
  @@index([status])
  @@index([lastChecked])
  @@map("ai_server_status")
}

model AIServerSync {
  id               String     @id @default(cuid())
  serverName       String
  syncType         String // data_sync, health_check, report_generation
  status           SyncStatus @default(PENDING)
  startTime        DateTime   @default(now())
  endTime          DateTime?
  durationMs       Int?
  recordsProcessed Int?
  recordsSynced    Int?
  errors           String? // JSON string
  metadata         Json? // JSON object
  userId           String?
  createdAt        DateTime   @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([serverName])
  @@index([status])
  @@index([startTime])
  @@map("ai_server_sync")
}

// 실제 AI 서버 데이터 구조를 반영한 추가 테이블들

// ChromaDBCollection, ChromaDBEmbedding 모델 제거 - 사용되지 않음

// SampleDataTemplate, QuestionHistory 모델 제거 - 사용되지 않음
