generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id                   String              @id @default(cuid())
  email                String              @unique
  password             String?
  name                 String
  role                 UserRole
  avatar               String?
  bio                  String?
  gradeLevel           String?
  status               UserStatus          @default(ACTIVE)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  school               String?
  subject              String?
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  aiServerSyncs        AIServerSync[]
  attempts             Attempt[]
  classMemberships     ClassMember[]
  createdClasses       Class[]             @relation("ClassCreator")
  assignedProblems     ProblemAssignment[] @relation("ProblemAssigner")
  studentAssignments   ProblemAssignment[] @relation("StudentAssignments")
  progressEntries      ProblemProgress[]
  problems             Problem[]           @relation("ProblemCreator")
  reviewedProblems     Problem[]           @relation("ProblemReviewer")
  searchQueries        SearchQuery[]
  teacherReports       TeacherReport[]
  textbooks            Textbook[]
  todos                Todo[]
  preferences          UserPreferences?

  @@index([role])
  @@index([status])
  @@index([deletedAt])
  @@index([lastLoginAt])
  @@map("users")
}

model Class {
  id             String              @id @default(cuid())
  name           String
  description    String?
  subject        String
  gradeLevel     String
  schoolYear     String
  semester       String
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?
  createdBy      String
  members        ClassMember[]
  creator        User                @relation("ClassCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  assignments    ProblemAssignment[]
  teacherReports TeacherReport[]

  @@index([createdBy])
  @@index([subject, gradeLevel])
  @@index([schoolYear, semester])
  @@index([isActive])
  @@index([deletedAt])
  @@map("classes")
}

model ClassMember {
  id       String         @id @default(cuid())
  classId  String
  userId   String
  role     ClassMemberRole @default(STUDENT)
  joinedAt DateTime       @default(now())
  leftAt   DateTime?
  isActive Boolean        @default(true)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  class    Class          @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@index([classId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
  @@map("class_members")
}

model UserPreferences {
  id                  String           @id @default(cuid())
  userId              String           @unique
  preferredDifficulty ProblemDifficulty @default(MEDIUM)
  learningStyle       LearningStyle
  studyTime           Int?
  interests           String
  emailNotifications  Boolean          @default(true)
  pushNotifications   Boolean          @default(true)
  weeklyReport        Boolean          @default(true)
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_preferences")
}

model LearningMaterial {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  subject          Subject
  difficulty       ProblemDifficulty
  estimatedTime    Int?
  files            Json?
  status           MaterialStatus            @default(DRAFT)
  isActive         Boolean                   @default(true)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  attempts         Attempt[]
  materialProblems LearningMaterialProblem[]
  progressEntries  ProblemProgress[]

  @@index([subject, difficulty, isActive])
  @@index([status, createdAt])
  @@index([status, subject, createdAt])
  @@index([deletedAt])
  @@map("learning_materials")
}

model Problem {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  type             ProblemType
  difficulty       ProblemDifficulty
  subject          Subject
  gradeLevel       GradeLevel?
  unit             String?
  options          Json?
  correctAnswer    String
  explanation      String?
  hints            Json?
  tags             Json?
  points           Int                       @default(1)
  timeLimit        Int?
  isActive         Boolean                   @default(true)
  isAIGenerated    Boolean                   @default(false)
  aiGenerationId   String?
  qualityScore     Float?
  reviewStatus     ReviewStatus              @default(PENDING)
  status           ProblemStatus             @default(DRAFT)
  reviewedBy       String?
  reviewedAt       DateTime?
  generationPrompt String?
  contextChunkIds  Json?
  generationTimeMs Int?
  modelName        String?
  tokensUsed       Int?
  costUsd          Float?
  textbookId       String?
  createdBy        String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  attempts         Attempt[]
  materialProblems LearningMaterialProblem[]
  progressEntries  ProblemProgress[]
  creator          User?                     @relation("ProblemCreator", fields: [createdBy], references: [id])
  textbook         Textbook?                 @relation(fields: [textbookId], references: [id])
  reviewer         User?                     @relation("ProblemReviewer", fields: [reviewedBy], references: [id])

  @@index([subject])
  @@index([difficulty])
  @@index([isAIGenerated])
  @@index([reviewStatus])
  @@index([status])
  @@index([type])
  @@index([aiGenerationId])
  @@index([reviewedBy])
  @@index([deletedAt])
  @@index([gradeLevel])
  @@index([createdBy])
  @@index([textbookId])
  @@index([subject, difficulty, gradeLevel])
  @@index([isAIGenerated, reviewStatus, status, createdAt])
  @@index([createdBy, createdAt])
  @@index([textbookId, gradeLevel])
  @@index([isActive, createdAt])
  @@index([subject, isActive, createdAt])
  @@map("problems")
}

model TeacherReport {
  id               String           @id @default(cuid())
  title            String
  content          String
  reportType       ReportType       @default(PROGRESS_REPORT)
  classId          String?
  classInfo        Json?
  students         Json?
  analysisData     Json?
  metadata         Json?
  tokenUsage       Int?
  generationTimeMs Int?
  modelName        String?
  costUsd          Float?
  status           ReportStatus     @default(DRAFT)
  createdBy        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  reportAnalyses   ReportAnalysis[]
  user             User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  class            Class?           @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([createdBy])
  @@index([classId])
  @@index([status])
  @@index([createdAt])
  @@index([reportType])
  @@map("teacher_reports")
}

model LearningMaterialProblem {
  id                 String           @id @default(cuid())
  learningMaterialId String
  problemId          String
  order              Int              @default(0)
  createdAt          DateTime         @default(now())
  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade)
  problem            Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([learningMaterialId, problemId])
  @@index([learningMaterialId])
  @@index([problemId])
  @@index([learningMaterialId, order])
  @@map("learning_material_problems")
}

model ProblemProgress {
  id               String           @id @default(cuid())
  userId           String
  studyId          String
  problemId        String
  attemptNumber    Int              @default(1)
  selectedAnswer   String?
  isCorrect        Boolean          @default(false)
  startedAt        DateTime?
  completedAt      DateTime?
  timeSpent        Int              @default(0)
  lastAccessed     DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  learningMaterial LearningMaterial @relation(fields: [studyId], references: [id], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, studyId, problemId, attemptNumber])
  @@index([studyId])
  @@index([userId, studyId])
  @@index([userId, studyId, attemptNumber])
  @@index([userId, isCorrect, completedAt])
  @@index([userId, studyId, lastAccessed])
  @@index([userId, studyId, attemptNumber, completedAt])
  @@map("problem_progress")
}

model Attempt {
  id               String            @id @default(cuid())
  userId           String
  studyId          String?
  problemId        String
  attemptNumber    Int               @default(1)
  selected         String
  isCorrect        Boolean           @default(false)
  startedAt        DateTime          @default(now())
  completedAt      DateTime?
  timeSpent        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  learningMaterial LearningMaterial? @relation(fields: [studyId], references: [id], onDelete: Cascade)
  problem          Problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
  @@index([userId, studyId])
  @@index([problemId])
  @@index([userId, studyId, attemptNumber, completedAt])
  @@map("attempts")
}

model ProblemAssignment {
  id             String           @id @default(cuid())
  title          String
  description    String?
  assignmentType AssignmentType   @default(HOMEWORK)
  status         AssignmentStatus @default(DRAFT)
  classId        String?
  studentId      String?
  problemIds     Json             // Array of problem IDs
  dueDate        DateTime?
  instructions   String?
  metadata       Json?
  assignedBy     String
  assignedAt     DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assigner       User             @relation("ProblemAssigner", fields: [assignedBy], references: [id], onDelete: Cascade)
  class          Class?           @relation(fields: [classId], references: [id], onDelete: Cascade)
  student        User?            @relation("StudentAssignments", fields: [studentId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([studentId])
  @@index([assignedBy])
  @@index([assignmentType])
  @@index([status])
  @@index([dueDate])
  @@map("problem_assignments")
}

model Todo {
  id          String     @id @default(cuid())
  userId      String
  text        String
  completed   Boolean    @default(false)
  priority    TodoPriority @default(MEDIUM)
  category    TodoCategory?
  description String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completed])
  @@map("todos")
}

model Textbook {
  id               String           @id @default(cuid())
  title            String
  subject          Subject
  gradeLevel       GradeLevel
  publisher        String?
  fileName         String
  filePath         String
  fileSize         Int
  mimeType         String?
  totalChunks      Int              @default(0)
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?
  uploadedBy       String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  chunks           DocumentChunk[]
  problems         Problem[]
  user             User             @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([subject, gradeLevel])
  @@index([processingStatus])
  @@index([uploadedBy])
  @@map("textbooks")
}

model DocumentChunk {
  id            String         @id @default(cuid())
  textbookId    String
  chunkIndex    Int
  content       String
  contentLength Int
  embeddingId   String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  textbook      Textbook       @relation(fields: [textbookId], references: [id], onDelete: Cascade)
  searchResults SearchResult[]

  @@index([textbookId])
  @@index([embeddingId])
  @@map("document_chunks")
}

model SearchQuery {
  id           String         @id @default(cuid())
  queryText    String
  subject      Subject?
  gradeLevel   GradeLevel?
  unit         String?
  resultsCount Int
  searchTimeMs Int
  userId       String
  sessionId    String?
  createdAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  results      SearchResult[]

  @@index([userId])
  @@index([createdAt])
  @@index([userId, subject, createdAt])
  @@index([subject, gradeLevel, createdAt])
  @@map("search_queries")
}

model SearchResult {
  id              String        @id @default(cuid())
  queryId         String
  chunkId         String
  similarityScore Float
  rankPosition    Int
  createdAt       DateTime      @default(now())
  chunk           DocumentChunk @relation(fields: [chunkId], references: [id])
  query           SearchQuery   @relation(fields: [queryId], references: [id])

  @@index([queryId])
  @@index([chunkId])
  @@map("search_results")
}

model ReportAnalysis {
  id           String        @id @default(cuid())
  reportId     String
  analysisType AnalysisType
  analysisData Json?
  createdAt    DateTime      @default(now())
  report       TeacherReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([analysisType])
  @@map("report_analyses")
}

model AIServerStatus {
  id             String       @id @default(cuid())
  serverName     String
  serverUrl      String
  status         ServerStatus @default(UNKNOWN)
  responseTimeMs Int?
  version        String?
  lastChecked    DateTime     @default(now())
  errorMessage   String?
  services       Json?
  createdAt      DateTime     @default(now())

  @@index([serverName])
  @@index([status])
  @@index([lastChecked])
  @@map("ai_server_status")
}

model AIServerSync {
  id               String     @id @default(cuid())
  serverName       String
  syncType         SyncType
  status           SyncStatus @default(PENDING)
  startTime        DateTime   @default(now())
  endTime          DateTime?
  durationMs       Int?
  recordsProcessed Int?
  recordsSynced    Int?
  errors           String?
  metadata         Json?
  userId           String?
  createdAt        DateTime   @default(now())
  user             User?      @relation(fields: [userId], references: [id])

  @@index([serverName])
  @@index([status])
  @@index([startTime])
  @@map("ai_server_sync")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ProblemType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  ESSAY
  TRUE_FALSE
  CODING
  MATH
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum ProblemStatus {
  DRAFT
  PENDING
  PUBLISHED
  ARCHIVED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ReportStatus {
  DRAFT
  GENERATING
  COMPLETED
  FAILED
}

enum ServerStatus {
  HEALTHY
  UNHEALTHY
  UNKNOWN
  MAINTENANCE
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

enum AnalysisType {
  BASIC_STATISTICS
  ACHIEVEMENT_DISTRIBUTION
  STRUGGLING_STUDENTS
  TOP_PERFORMERS
  SUBJECT_ANALYSIS
  TREND_ANALYSIS
}

enum ClassMemberRole {
  STUDENT
  TEACHER
  ADMIN
}

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  READING_WRITING
}

enum Subject {
  KOREAN
  MATH
  ENGLISH
  SCIENCE
  SOCIAL_STUDIES
  HISTORY
  GEOGRAPHY
  PHYSICS
  CHEMISTRY
  BIOLOGY
  COMPUTER_SCIENCE
  ART
  MUSIC
  PHYSICAL_EDUCATION
  ETHICS
  OTHER
}

enum MaterialStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum GradeLevel {
  KINDERGARTEN
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
  UNIVERSITY
  ADULT
}

enum ReportType {
  PROGRESS_REPORT
  PERFORMANCE_ANALYSIS
  CLASS_SUMMARY
  STUDENT_INSIGHTS
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TodoCategory {
  PERSONAL
  WORK
  STUDY
  HEALTH
  FINANCE
  FAMILY
  OTHER
}

enum TextbookStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SyncType {
  FULL_SYNC
  INCREMENTAL_SYNC
  MANUAL_SYNC
  SCHEDULED_SYNC
}

enum AssignmentType {
  HOMEWORK
  QUIZ
  EXAM
  PRACTICE
  REVIEW
  PROJECT
}

enum AssignmentStatus {
  DRAFT
  ACTIVE
  COMPLETED
  OVERDUE
  CANCELLED
}
