generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/erd.svg"
}

datasource db {
  provider     = "sqlite"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String
  role             String
  avatar           String?
  bio              String?
  grade            String?
  status           String             @default("ACTIVE")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  school           String?
  subject          String?
  reports          AnalysisReport[]
  attempts         Attempt[]
  counseling       CareerCounseling[]
  reviewedProblems Problem[]          @relation("ProblemReviewer")
  progress         StudentProgress[]
  teacherReports   TeacherReport[]    @relation("TeacherReports")
  preferences      UserPreferences?

  @@index([role])
  @@index([status])
  @@index([deletedAt])
  @@map("users")
}

model UserPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique
  preferredDifficulty String  @default("MEDIUM")
  learningStyle       String
  studyTime           Int?
  interests           String
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  weeklyReport        Boolean @default(true)
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_preferences")
}

model LearningMaterial {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  subject          String
  difficulty       String
  estimatedTime    Int?
  files            String?
  status           String
  isActive         Boolean                   @default(true)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  materialProblems LearningMaterialProblem[]

  @@index([subject, difficulty, isActive])
  @@index([status, createdAt])
  @@index([status, subject, createdAt])
  @@index([deletedAt])
  @@map("learning_materials")
}

model Problem {
  id               String                    @id @default(cuid())
  title            String
  description      String?
  content          String
  type             String
  difficulty       String
  subject          String
  options          String?
  correctAnswer    String
  explanation      String?
  hints            String?
  tags             String?
  points           Int                       @default(1)
  timeLimit        Int?
  isActive         Boolean                   @default(true)
  isAIGenerated    Boolean                   @default(false)
  aiGenerationId   String?
  qualityScore     Float?
  reviewStatus     String                    @default("PENDING")
  reviewedBy       String?
  reviewedAt       DateTime?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  deletedAt        DateTime?
  attempts         Attempt[]
  materialProblems LearningMaterialProblem[]
  reviewer         User?                     @relation("ProblemReviewer", fields: [reviewedBy], references: [id])
  aiGeneration     AIGeneration?             @relation(fields: [aiGenerationId], references: [id])
  progress         StudentProgress[]

  @@index([subject])
  @@index([difficulty])
  @@index([isAIGenerated])
  @@index([reviewStatus])
  @@index([type])
  @@index([aiGenerationId])
  @@index([reviewedBy])
  @@index([deletedAt])
  @@map("problems")
}

model StudentProgress {
  id        String   @id @default(cuid())
  studentId String
  problemId String?
  status    String   @default("NOT_STARTED")
  score     Int?     @default(0)
  timeSpent Int      @default(0)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problem   Problem? @relation(fields: [problemId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, problemId])
  @@index([studentId])
  @@index([problemId])
  @@index([status])
  @@map("student_progress")
}

model AnalysisReport {
  id                    String                 @id @default(cuid())
  studentId             String
  type                  String
  title                 String
  period                String
  insights              String?
  recommendations       String?
  strengths             String?
  weaknesses            String?
  status                String                 @default("COMPLETED")
  aiGenerationId        String?
  createdAt             DateTime               @default(now())
  deletedAt             DateTime?
  aiGeneration          AIGeneration?          @relation(fields: [aiGenerationId], references: [id])
  student               User                   @relation(fields: [studentId], references: [id])
  reportInsights        ReportInsight[]
  reportRecommendations ReportRecommendation[]

  @@index([studentId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([studentId, type, status, createdAt])
  @@index([aiGenerationId])
  @@index([deletedAt])
  @@map("analysis_reports")
}

model TeacherReport {
  id           String    @id @default(cuid())
  teacherId    String
  title        String
  content      String
  reportType   String
  classInfo    String
  studentCount Int
  analysis     String?
  status       String    @default("COMPLETED")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  teacher      User      @relation("TeacherReports", fields: [teacherId], references: [id])

  @@index([teacherId])
  @@index([reportType])
  @@index([status])
  @@index([createdAt])
  @@index([teacherId, reportType, status, createdAt])
  @@index([deletedAt])
  @@map("teacher_reports")
}

model CareerCounseling {
  id                        String        @id @default(cuid())
  studentId                 String
  type                      String
  title                     String
  content                   String
  careerSuggestions         String?
  universityRecommendations String?
  skillGaps                 String?
  status                    String        @default("COMPLETED")
  aiGenerationId            String?
  createdAt                 DateTime      @default(now())
  deletedAt                 DateTime?
  aiGeneration              AIGeneration? @relation(fields: [aiGenerationId], references: [id])
  student                   User          @relation(fields: [studentId], references: [id])

  @@index([studentId])
  @@index([type])
  @@index([status])
  @@index([aiGenerationId])
  @@index([deletedAt])
  @@map("career_counseling")
}

model LearningMaterialProblem {
  id                 String           @id @default(cuid())
  learningMaterialId String
  problemId          String
  createdAt          DateTime         @default(now())
  problem            Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  learningMaterial   LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade)

  @@unique([learningMaterialId, problemId])
  @@index([learningMaterialId])
  @@index([problemId])
  @@map("learning_material_problems")
}

model AIModel {
  id          String         @id @default(cuid())
  name        String
  version     String
  provider    String
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  generations AIGeneration[]

  @@map("ai_models")
}

model AIGeneration {
  id         String             @id @default(cuid())
  modelId    String
  prompt     String
  response   String
  tokensUsed Int?
  cost       Float?
  duration   Int?
  createdAt  DateTime           @default(now())
  model      AIModel            @relation(fields: [modelId], references: [id])
  reports    AnalysisReport[]
  counseling CareerCounseling[]
  problems   Problem[]

  @@index([modelId])
  @@index([createdAt])
  @@map("ai_generations")
}

model ReportInsight {
  id        String         @id @default(cuid())
  reportId  String
  category  String
  content   String
  priority  String
  createdAt DateTime       @default(now())
  report    AnalysisReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@map("report_insights")
}

model ReportRecommendation {
  id        String         @id @default(cuid())
  reportId  String
  type      String
  content   String
  priority  String
  createdAt DateTime       @default(now())
  report    AnalysisReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@map("report_recommendations")
}

model Attempt {
  id        String   @id @default(cuid())
  userId    String
  problemId String
  selected  String
  isCorrect Boolean
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, problemId])
  @@map("attempts")
}
