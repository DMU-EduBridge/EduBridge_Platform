// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums are not supported in SQLite, using String instead
// When migrating to PostgreSQL, these can be converted to proper enums

// User roles - enum UserRole { TEACHER, STUDENT, ADMIN }
// User status - enum UserStatus { ACTIVE, INACTIVE, SUSPENDED }
// Problem difficulty levels - enum DifficultyLevel { EASY, MEDIUM, HARD, EXPERT }
// Problem types - enum ProblemType { MULTIPLE_CHOICE, SHORT_ANSWER, ESSAY, CODING, MATH }
// Problem review status - enum ReviewStatus { PENDING, APPROVED, REJECTED }
// Learning material status - enum MaterialStatus { DRAFT, PUBLISHED, ARCHIVED }
// Report types - enum ReportType { MONTHLY, INDIVIDUAL, SUBJECT, WEEKLY }
// Report status - enum ReportStatus { COMPLETED, IN_PROGRESS, PENDING }
// Progress status - enum ProgressStatus { NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED }
// Priority levels - enum Priority { HIGH, MEDIUM, LOW }

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String // UserRole enum: TEACHER, STUDENT, ADMIN
  avatar    String?
  bio       String?
  grade     String? // 학년 (1학년, 2학년 등)
  status    String  @default("ACTIVE") // UserStatus enum: ACTIVE, INACTIVE, SUSPENDED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // 소프트 삭제 필드

  // 관계
  preferences   UserPreferences?
  progress      StudentProgress[]
  reports       AnalysisReport[]
  counseling    CareerCounseling[]
  reviewedProblems Problem[] @relation("ProblemReviewer")

  @@index([role])
  @@index([status])
  @@index([deletedAt]) // 소프트 삭제 쿼리 최적화
  @@map("users")
}

model UserPreferences {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 학습 설정
  preferredDifficulty String @default("MEDIUM") // DifficultyLevel enum: EASY, MEDIUM, HARD, EXPERT
  learningStyle       String // visual, auditory, kinesthetic (JSON string - 애플리케이션에서 객체로 처리)
  studyTime           Int?     // 분 단위
  interests           String // JSON string - 애플리케이션에서 배열로 처리
  
  // 알림 설정
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  weeklyReport       Boolean @default(true)
  
  @@index([userId])
  @@map("user_preferences")
}


model LearningMaterial {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String
  subject     String   // 과목명 (수학, 과학 등)
  difficulty  String   // DifficultyLevel enum: EASY, MEDIUM, HARD, EXPERT
  estimatedTime Int?   // 분 단위
  files       String?  // JSON string - 업로드된 파일들 (애플리케이션에서 배열로 처리)
  status      String   // MaterialStatus enum: DRAFT, PUBLISHED, ARCHIVED
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // 소프트 삭제 필드

  // 관계
  materialProblems LearningMaterialProblem[]

  @@index([subject, difficulty, isActive]) // 조회 패턴별 복합 인덱스
  @@index([status, createdAt]) // 상태별 최신순 조회 최적화
  @@index([deletedAt]) // 소프트 삭제 쿼리 최적화
  @@map("learning_materials")
}

model Problem {
  id          String      @id @default(cuid())
  title       String
  description String?
  content     String
  type        String // ProblemType enum: MULTIPLE_CHOICE, SHORT_ANSWER, ESSAY, CODING, MATH
  difficulty  String // DifficultyLevel enum: EASY, MEDIUM, HARD, EXPERT
  subject     String // 과목명 (수학, 과학 등)
  
  // 문제 세부사항
  options     String?   // 객관식 선택지 (JSON string - 애플리케이션에서 배열로 처리)
  correctAnswer String
  explanation String?
  hints       String?  // JSON string - 애플리케이션에서 배열로 처리
  tags        String?  // JSON string - 애플리케이션에서 배열로 처리
  
  // 메타데이터
  points      Int         @default(1)
  timeLimit   Int?        // 초 단위
  isActive    Boolean     @default(true)
  
  // AI 생성 관련
  isAIGenerated Boolean @default(false)
  aiGenerationId String?
  aiGeneration   AIGeneration? @relation(fields: [aiGenerationId], references: [id])
  
  // 품질 관리
  qualityScore   Float?   // AI 평가 점수
  reviewStatus   String   @default("PENDING") // ReviewStatus enum: PENDING, APPROVED, REJECTED
  reviewedBy     String?  // 검토자 ID
  reviewer       User?    @relation("ProblemReviewer", fields: [reviewedBy], references: [id], onDelete: SetNull) // 리뷰어 삭제 시 NULL 처리
  reviewedAt     DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? // 소프트 삭제 필드

  // 관계
  progress   StudentProgress[]
  materialProblems LearningMaterialProblem[]

  @@index([subject])
  @@index([difficulty])
  @@index([isAIGenerated])
  @@index([reviewStatus])
  @@index([type])
  @@index([aiGenerationId])
  @@index([reviewedBy])
  @@index([deletedAt]) // 소프트 삭제 쿼리 최적화
  @@map("problems")
}

model StudentProgress {
  id        String        @id @default(cuid())
  studentId String
  student   User          @relation(fields: [studentId], references: [id])
  problemId String?
  problem   Problem?      @relation(fields: [problemId], references: [id])
  
  status    String @default("NOT_STARTED") // ProgressStatus enum: NOT_STARTED, IN_PROGRESS, COMPLETED, FAILED
  score     Int?    @default(0)
  timeSpent Int     @default(0) // 분 단위
  attempts  Int     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, problemId]) // 중복 진행 방지 제약
  @@index([studentId])
  @@index([problemId])
  @@index([status])
  @@map("student_progress")
}


model AnalysisReport {
  id        String   @id @default(cuid())
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  
  type      String   // ReportType enum: MONTHLY, INDIVIDUAL, SUBJECT, WEEKLY
  title     String
  period    String   // 기간 (예: "2024년 1월")
  insights  String?  // AI 생성 인사이트 (JSON string - 레거시 호환용, 애플리케이션에서 배열로 처리)
  recommendations String? // 개선 권장사항 (JSON string - 레거시 호환용, 애플리케이션에서 배열로 처리)
  strengths String?  // JSON string - 애플리케이션에서 배열로 처리
  weaknesses String? // JSON string - 애플리케이션에서 배열로 처리
  status    String   @default("COMPLETED") // ReportStatus enum: COMPLETED, IN_PROGRESS, PENDING
  
  // AI 생성 메타데이터
  aiGenerationId String?
  aiGeneration   AIGeneration? @relation(fields: [aiGenerationId], references: [id])
  
  createdAt DateTime @default(now())
  deletedAt DateTime? // 소프트 삭제 필드
  
  // 정규화된 관계
  reportInsights       ReportInsight[]
  reportRecommendations ReportRecommendation[]

  @@index([studentId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([aiGenerationId])
  @@index([deletedAt]) // 소프트 삭제 쿼리 최적화
  @@map("analysis_reports")
}

model CareerCounseling {
  id        String        @id @default(cuid())
  studentId String
  student   User          @relation(fields: [studentId], references: [id])
  
  type      String // ACADEMIC, CAREER, PERSONAL, UNIVERSITY_GUIDANCE
  title     String
  content   String
  
  // AI 분석 결과
  careerSuggestions  String? // JSON string - 애플리케이션에서 배열로 처리
  universityRecommendations String? // JSON string - 애플리케이션에서 배열로 처리
  skillGaps         String? // JSON string - 애플리케이션에서 배열로 처리
  status            String  @default("COMPLETED") // COMPLETED, IN_PROGRESS, PENDING
  
  // AI 생성 메타데이터
  aiGenerationId String?
  aiGeneration   AIGeneration? @relation(fields: [aiGenerationId], references: [id])
  
  createdAt DateTime @default(now())
  deletedAt DateTime? // 소프트 삭제 필드

  @@index([studentId])
  @@index([type])
  @@index([status])
  @@index([aiGenerationId])
  @@index([deletedAt]) // 소프트 삭제 쿼리 최적화
  @@map("career_counseling")
}

// 학습자료 ↔ 문제 관계 중간 테이블
model LearningMaterialProblem {
  id                String          @id @default(cuid())
  learningMaterialId String
  learningMaterial  LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade)
  problemId         String
  problem           Problem         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([learningMaterialId, problemId]) // 중복 관계 방지
  @@index([learningMaterialId])
  @@index([problemId])
  @@map("learning_material_problems")
}

// AI 모델 관리
model AIModel {
  id          String   @id @default(cuid())
  name        String   // "gpt-4", "claude-3", "gemini-pro"
  version     String   // "1.0", "2024-01"
  provider    String   // "openai", "anthropic", "google"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  generations AIGeneration[]

  @@map("ai_models")
}

// AI 생성 이력 추적
model AIGeneration {
  id          String   @id @default(cuid())
  modelId     String
  model       AIModel  @relation(fields: [modelId], references: [id])
  
  prompt      String   // 사용된 프롬프트
  response    String   // AI 응답
  tokensUsed  Int?     // 사용된 토큰 수
  cost        Float?   // 비용
  duration    Int?     // 생성 시간(ms)
  
  createdAt   DateTime @default(now())
  
  // 관계
  problems    Problem[]
  reports     AnalysisReport[]
  counseling  CareerCounseling[]

  @@index([modelId])
  @@index([createdAt])
  @@map("ai_generations")
}

// 리포트 인사이트 정규화
model ReportInsight {
  id       String @id @default(cuid())
  reportId String
  report   AnalysisReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  category String // "학습패턴", "성취도", "약점분석"
  content  String
  priority String // Priority enum: HIGH, MEDIUM, LOW
  
  createdAt DateTime @default(now())

  @@index([reportId])
  @@map("report_insights")
}

// 리포트 권장사항 정규화
model ReportRecommendation {
  id       String @id @default(cuid())
  reportId String
  report   AnalysisReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  type     String // "학습방법", "과목추천", "시간관리"
  content  String
  priority String // Priority enum: HIGH, MEDIUM, LOW
  
  createdAt DateTime @default(now())

  @@index([reportId])
  @@map("report_recommendations")
}

